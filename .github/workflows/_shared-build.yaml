
name: Reusable build workflow
on:
  workflow_call:
    inputs:
      ref:
        description: 'The branch, tag or SHA to build'
        required: true
        type: string
      release:
        description: 'Release version tag for this build'
        default: ''
        required: false
        type: string
      docker:
        description: 'Build docker images'
        default: false
        required: true
        type: boolean
      docker_repository:
        description: 'Docker Hub Repository'
        default: ''
        required: false
        type: string
      docker_tag_prefix:
        description: 'Docker Image Tag Prefix'
        default: ''
        required: false
        type: string
      additional_tags:
        description: 'Additional Docker Image Tags (JSON)'
        default: ''
        required: false
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        description: 'Docker Hub Username'
        required: false
      DOCKERHUB_TOKEN:
        description: 'Docker Hub Token'
        required: false

# shared build jobs
jobs:
  build_ui_package:
    name: Build UI package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    # setup node & npm
    - name: Set up node
      uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4
      with:
        node-version: 20.x
    - name: Cache node-modules for UI package
      id: cache-npm
      uses: actions/cache@2f8e54208210a422b2efd51efaa6bd6d7ca8920f # v3
      with:
        path: ./ui-package/node_modules
        key: uipackage-npm-${{ runner.os }}-${{ hashFiles('./ui-package/package-lock.json') }}
        restore-keys: |
          uipackage-npm-${{ runner.os }}-
          uipackage-npm-
    
    # build UI package
    - name: Build UI package
      run: |
        make build-ui

    # upload artifacts
    - name: "Upload artifact: ui-package"
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
      with:
        path: ./ui-package/dist/*
        name: ui-package

  build_linux_amd64_binary:
    name: Build linux/amd64 binary
    needs: [build_ui_package]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    # setup global dependencies
    - name: Set up go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4
      with:
        go-version: 1.24.x
    
    # setup project dependencies
    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    # download UI build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist

    # build binaries
    - name: Build linux amd64 binary
      run: |
        make build
      env:
        RELEASE: ${{ inputs.release }}

    # upload artifacts
    - name: "Upload artifact: explorer_linux_amd64"
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
      with:
        path: ./bin/*
        name: explorer_linux_amd64
  
  build_linux_arm64_binary:
    name: Build linux/arm64 binary
    needs: [build_ui_package]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    # setup global dependencies
    - name: Set up go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4
      with:
        go-version: 1.24.x

    # setup cross build libs
    - name: Get cross build dependencies
      run: |
        sudo apt-get update
        sudo apt-get -y install gcc-aarch64-linux-gnu
    
    # setup project dependencies
    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    # download UI build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist

    # build binaries
    - name: Build linux arm64 binary
      run: |
        make build GOARCH=arm64 CC=/usr/bin/aarch64-linux-gnu-gcc
      env:
        RELEASE: ${{ inputs.release }}

    # upload artifacts
    - name: "Upload artifact: explorer_linux_arm64"
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
      with:
        path: ./bin/*
        name: explorer_linux_arm64

  build_windows_binary:
    name: Build windows/amd64 binary
    needs: [build_ui_package]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    # setup global dependencies
    - name: Set up go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4
      with:
        go-version: 1.24.x

    # setup project dependencies
    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    # download UI build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist

    # build binaries
    - name: Build windows binary
      run: |
        make build
      env:
        RELEASE: ${{ inputs.release }}

    # upload artifacts
    - name: "Upload artifact: explorer_windows_amd64"
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
      with:
        path: ./bin/*
        name: explorer_windows_amd64

  build_darwin_amd64_binary:
    name: Build macos/amd64 binary
    needs: [build_ui_package]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    # setup global dependencies
    - name: Set up go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4
      with:
        go-version: 1.24.x

    # setup project dependencies
    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    # download UI build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist

    # build binaries
    - name: Build macos amd64 binary
      run: |
        make build
      env:
        RELEASE: ${{ inputs.release }}

    # upload artifacts
    - name: "Upload artifact: explorer_darwin_amd64"
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
      with:
        path: ./bin/*
        name: explorer_darwin_amd64

  build_darwin_arm64_binary:
    name: Build macos/arm64 binary
    needs: [build_ui_package]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    # setup global dependencies
    - name: Set up go
      uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4
      with:
        go-version: 1.24.x

    # setup project dependencies
    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    # download UI build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist

    # build binaries
    - name: Build macos arm64 binary
      run: |
        make build GOARCH=arm64
      env:
        RELEASE: ${{ inputs.release }}

    # upload artifacts
    - name: "Upload artifact: explorer_darwin_arm64"
      uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
      with:
        path: ./bin/*
        name: explorer_darwin_arm64

  build_amd64_docker_image:
    name: Build amd64 docker image
    needs: [build_linux_amd64_binary]
    if: ${{ inputs.docker }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}

    - name: Get build version
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # prepare docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2
    - name: Login to Docker Hub
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # download build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist
    - name: Download build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: explorer_linux_amd64
        path: ./bin

    # prepare environment
    - name: Prepare build environment
      run: |
        chmod +x ./bin/*
        ls -lach ./bin
    
    # build amd64 image
    - name: Build amd64 docker image
      run: |
        docker build . --file Dockerfile-stub \
          --tag ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-amd64 \
          --tag ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-amd64 \
          --platform=linux/amd64
    - name: Push amd64 docker images
      run: |
        docker push ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-amd64
        docker push ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-amd64
  
  build_arm64_docker_image:
    name: Build arm64 docker image
    needs: [build_linux_arm64_binary]
    if: ${{ inputs.docker }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}
    - name: Get build version
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # prepare docker
    - name: Set up Docker QEMU
      uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2
    - name: Login to Docker Hub
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # download build artifacts
    - name: Download UI build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: ui-package
        path: ./ui-package/dist
    - name: Download build artifacts
      uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4
      with:
        name: explorer_linux_arm64
        path: ./bin

    # prepare environment
    - name: Prepare build environment
      run: |
        chmod +x ./bin/*
        ls -lach ./bin
    
    # build arm64 image
    - name: Build arm64 docker image
      run: |
        docker build . --file Dockerfile-stub \
          --tag ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-arm64 \
          --tag ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-arm64 \
          --platform=linux/arm64
    - name: Push arm64 docker image
      run: |
        docker push ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-arm64
        docker push ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-arm64

  build_multiarch_image:
    name: Build multiarch docker image
    needs: [build_amd64_docker_image, build_arm64_docker_image]
    if: ${{ inputs.docker }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}
    - name: Get build version
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # prepare docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2
    - name: Login to Docker Hub
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # build multiarch image
    - name: Build multiarch docker manifest
      run: |
        docker manifest create ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }} \
        --amend ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-amd64 \
        --amend ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-arm64
    - name: Push multiarch docker manifest
      run: |
        docker manifest push ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}

  build_extra_image:
    name: Build additional docker manifests
    needs: [build_multiarch_image]
    if: ${{ inputs.additional_tags }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJSON(inputs.additional_tags) }}
    steps:
    - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
      with:
        ref: ${{ inputs.ref }}
    - name: Get build version
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    # prepare docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2
    - name: Login to Docker Hub
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    # build multiarch image
    - name: "Build additional docker manifest: ${{ matrix.tag }}"
      run: |
        docker manifest create ${{ inputs.docker_repository }}:${{ matrix.tag }}-amd64 \
        --amend ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-amd64

        docker manifest create ${{ inputs.docker_repository }}:${{ matrix.tag }}-arm64 \
        --amend ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-arm64

        docker manifest create ${{ inputs.docker_repository }}:${{ matrix.tag }} \
        --amend ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-amd64 \
        --amend ${{ inputs.docker_repository }}:${{ inputs.docker_tag_prefix }}-${{ steps.vars.outputs.sha_short }}-arm64

    - name: "Push additional docker manifest: ${{ matrix.tag }}"
      run: |
        docker manifest push ${{ inputs.docker_repository }}:${{ matrix.tag }}-amd64
        docker manifest push ${{ inputs.docker_repository }}:${{ matrix.tag }}-arm64
        docker manifest push ${{ inputs.docker_repository }}:${{ matrix.tag }}