// Code generated by fastssz. DO NOT EDIT.
// Hash: eaeba007a5bccb81a6437f4146d03f627f52792f537b2b8fee9df48555afc8c5
// Version: 0.1.3
package beacon

import (
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the EpochStatsPacked object
func (e *EpochStatsPacked) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the EpochStatsPacked object to a target array
func (e *EpochStatsPacked) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(108)

	// Offset (0) 'ActiveValidators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ActiveValidators) * 6

	// Offset (1) 'ProposerDuties'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.ProposerDuties) * 8

	// Offset (2) 'SyncCommitteeDuties'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.SyncCommitteeDuties) * 8

	// Field (3) 'RandaoMix'
	if size := len(e.RandaoMix); size != 32 {
		err = ssz.ErrBytesLengthFn("EpochStatsPacked.RandaoMix", size, 32)
		return
	}
	dst = append(dst, e.RandaoMix[:]...)

	// Field (4) 'NextRandaoMix'
	if size := len(e.NextRandaoMix); size != 32 {
		err = ssz.ErrBytesLengthFn("EpochStatsPacked.NextRandaoMix", size, 32)
		return
	}
	dst = append(dst, e.NextRandaoMix[:]...)

	// Field (5) 'TotalBalance'
	dst = ssz.MarshalUint64(dst, uint64(e.TotalBalance))

	// Field (6) 'ActiveBalance'
	dst = ssz.MarshalUint64(dst, uint64(e.ActiveBalance))

	// Field (7) 'FirstDepositIndex'
	dst = ssz.MarshalUint64(dst, e.FirstDepositIndex)

	// Offset (8) 'PendingWithdrawals'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.PendingWithdrawals) * 16

	// Offset (9) 'PendingConsolidations'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(e.PendingConsolidations) * 16

	// Field (0) 'ActiveValidators'
	if size := len(e.ActiveValidators); size > 10000000 {
		err = ssz.ErrListTooBigFn("EpochStatsPacked.ActiveValidators", size, 10000000)
		return
	}
	for ii := 0; ii < len(e.ActiveValidators); ii++ {
		if dst, err = e.ActiveValidators[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (1) 'ProposerDuties'
	if size := len(e.ProposerDuties); size > 100 {
		err = ssz.ErrListTooBigFn("EpochStatsPacked.ProposerDuties", size, 100)
		return
	}
	for ii := 0; ii < len(e.ProposerDuties); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(e.ProposerDuties[ii]))
	}

	// Field (2) 'SyncCommitteeDuties'
	if size := len(e.SyncCommitteeDuties); size > 10000 {
		err = ssz.ErrListTooBigFn("EpochStatsPacked.SyncCommitteeDuties", size, 10000)
		return
	}
	for ii := 0; ii < len(e.SyncCommitteeDuties); ii++ {
		dst = ssz.MarshalUint64(dst, uint64(e.SyncCommitteeDuties[ii]))
	}

	// Field (8) 'PendingWithdrawals'
	if size := len(e.PendingWithdrawals); size > 10000000 {
		err = ssz.ErrListTooBigFn("EpochStatsPacked.PendingWithdrawals", size, 10000000)
		return
	}
	for ii := 0; ii < len(e.PendingWithdrawals); ii++ {
		if dst, err = e.PendingWithdrawals[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (9) 'PendingConsolidations'
	if size := len(e.PendingConsolidations); size > 10000000 {
		err = ssz.ErrListTooBigFn("EpochStatsPacked.PendingConsolidations", size, 10000000)
		return
	}
	for ii := 0; ii < len(e.PendingConsolidations); ii++ {
		if dst, err = e.PendingConsolidations[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the EpochStatsPacked object
func (e *EpochStatsPacked) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 108 {
		return ssz.ErrSize
	}

	tail := buf
	var o0, o1, o2, o8, o9 uint64

	// Offset (0) 'ActiveValidators'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 108 {
		return ssz.ErrInvalidVariableOffset
	}

	// Offset (1) 'ProposerDuties'
	if o1 = ssz.ReadOffset(buf[4:8]); o1 > size || o0 > o1 {
		return ssz.ErrOffset
	}

	// Offset (2) 'SyncCommitteeDuties'
	if o2 = ssz.ReadOffset(buf[8:12]); o2 > size || o1 > o2 {
		return ssz.ErrOffset
	}

	// Field (3) 'RandaoMix'
	e.RandaoMix = phase0.Hash32((buf[12:44]))

	// Field (4) 'NextRandaoMix'
	e.NextRandaoMix = phase0.Hash32(buf[44:76])

	// Field (5) 'TotalBalance'
	e.TotalBalance = phase0.Gwei(ssz.UnmarshallUint64(buf[76:84]))

	// Field (6) 'ActiveBalance'
	e.ActiveBalance = phase0.Gwei(ssz.UnmarshallUint64(buf[84:92]))

	// Field (7) 'FirstDepositIndex'
	e.FirstDepositIndex = ssz.UnmarshallUint64(buf[92:100])

	// Offset (8) 'PendingWithdrawals'
	if o8 = ssz.ReadOffset(buf[100:104]); o8 > size || o2 > o8 {
		return ssz.ErrOffset
	}

	// Offset (9) 'PendingConsolidations'
	if o9 = ssz.ReadOffset(buf[104:108]); o9 > size || o8 > o9 {
		return ssz.ErrOffset
	}

	// Field (0) 'ActiveValidators'
	{
		buf = tail[o0:o1]
		num, err := ssz.DivideInt2(len(buf), 6, 10000000)
		if err != nil {
			return err
		}
		e.ActiveValidators = make([]EpochStatsPackedValidator, num)
		for ii := 0; ii < num; ii++ {
			if err = e.ActiveValidators[ii].UnmarshalSSZ(buf[ii*6 : (ii+1)*6]); err != nil {
				return err
			}
		}
	}

	// Field (1) 'ProposerDuties'
	{
		buf = tail[o1:o2]
		num, err := ssz.DivideInt2(len(buf), 8, 100)
		if err != nil {
			return err
		}
		e.ProposerDuties = make([]phase0.ValidatorIndex, num)
		for ii := 0; ii < num; ii++ {
			e.ProposerDuties[ii] = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}

	// Field (2) 'SyncCommitteeDuties'
	{
		buf = tail[o2:o8]
		num, err := ssz.DivideInt2(len(buf), 8, 10000)
		if err != nil {
			return err
		}
		e.SyncCommitteeDuties = make([]phase0.ValidatorIndex, num)
		for ii := 0; ii < num; ii++ {
			e.SyncCommitteeDuties[ii] = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8]))
		}
	}

	// Field (8) 'PendingWithdrawals'
	{
		buf = tail[o8:o9]
		num, err := ssz.DivideInt2(len(buf), 16, 10000000)
		if err != nil {
			return err
		}
		e.PendingWithdrawals = make([]EpochStatsPendingWithdrawals, num)
		for ii := 0; ii < num; ii++ {
			if err = e.PendingWithdrawals[ii].UnmarshalSSZ(buf[ii*16 : (ii+1)*16]); err != nil {
				return err
			}
		}
	}

	// Field (9) 'PendingConsolidations'
	{
		buf = tail[o9:]
		num, err := ssz.DivideInt2(len(buf), 16, 10000000)
		if err != nil {
			return err
		}
		e.PendingConsolidations = make([]electra.PendingConsolidation, num)
		for ii := 0; ii < num; ii++ {
			if err = e.PendingConsolidations[ii].UnmarshalSSZ(buf[ii*16 : (ii+1)*16]); err != nil {
				return err
			}
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the EpochStatsPacked object
func (e *EpochStatsPacked) SizeSSZ() (size int) {
	size = 108

	// Field (0) 'ActiveValidators'
	size += len(e.ActiveValidators) * 6

	// Field (1) 'ProposerDuties'
	size += len(e.ProposerDuties) * 8

	// Field (2) 'SyncCommitteeDuties'
	size += len(e.SyncCommitteeDuties) * 8

	// Field (8) 'PendingWithdrawals'
	size += len(e.PendingWithdrawals) * 16

	// Field (9) 'PendingConsolidations'
	size += len(e.PendingConsolidations) * 16

	return
}

// HashTreeRoot ssz hashes the EpochStatsPacked object
func (e *EpochStatsPacked) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the EpochStatsPacked object with a hasher
func (e *EpochStatsPacked) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ActiveValidators'
	{
		subIndx := hh.Index()
		num := uint64(len(e.ActiveValidators))
		if num > 10000000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.ActiveValidators {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 10000000)
	}

	// Field (1) 'ProposerDuties'
	{
		if size := len(e.ProposerDuties); size > 100 {
			err = ssz.ErrListTooBigFn("EpochStatsPacked.ProposerDuties", size, 100)
			return
		}
		subIndx := hh.Index()
		for _, i := range e.ProposerDuties {
			hh.AppendUint64(uint64(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(e.ProposerDuties))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(100, numItems, 8))
	}

	// Field (2) 'SyncCommitteeDuties'
	{
		if size := len(e.SyncCommitteeDuties); size > 10000 {
			err = ssz.ErrListTooBigFn("EpochStatsPacked.SyncCommitteeDuties", size, 10000)
			return
		}
		subIndx := hh.Index()
		for _, i := range e.SyncCommitteeDuties {
			hh.AppendUint64(uint64(i))
		}
		hh.FillUpTo32()
		numItems := uint64(len(e.SyncCommitteeDuties))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(10000, numItems, 8))
	}

	// Field (3) 'RandaoMix'
	if size := len(e.RandaoMix); size != 32 {
		err = ssz.ErrBytesLengthFn("EpochStatsPacked.RandaoMix", size, 32)
		return
	}
	hh.PutBytes(e.RandaoMix[:])

	// Field (4) 'NextRandaoMix'
	if size := len(e.NextRandaoMix); size != 32 {
		err = ssz.ErrBytesLengthFn("EpochStatsPacked.NextRandaoMix", size, 32)
		return
	}
	hh.PutBytes(e.NextRandaoMix[:])

	// Field (5) 'TotalBalance'
	hh.PutUint64(uint64(e.TotalBalance))

	// Field (6) 'ActiveBalance'
	hh.PutUint64(uint64(e.ActiveBalance))

	// Field (7) 'FirstDepositIndex'
	hh.PutUint64(e.FirstDepositIndex)

	// Field (8) 'PendingWithdrawals'
	{
		subIndx := hh.Index()
		num := uint64(len(e.PendingWithdrawals))
		if num > 10000000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.PendingWithdrawals {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 10000000)
	}

	// Field (9) 'PendingConsolidations'
	{
		subIndx := hh.Index()
		num := uint64(len(e.PendingConsolidations))
		if num > 10000000 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range e.PendingConsolidations {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 10000000)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the EpochStatsPacked object
func (e *EpochStatsPacked) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the EpochStatsPackedValidator object
func (e *EpochStatsPackedValidator) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the EpochStatsPackedValidator object to a target array
func (e *EpochStatsPackedValidator) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorIndexOffset'
	dst = ssz.MarshalUint32(dst, e.ValidatorIndexOffset)

	// Field (1) 'EffectiveBalanceEth'
	dst = ssz.MarshalUint16(dst, e.EffectiveBalanceEth)

	return
}

// UnmarshalSSZ ssz unmarshals the EpochStatsPackedValidator object
func (e *EpochStatsPackedValidator) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 6 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorIndexOffset'
	e.ValidatorIndexOffset = ssz.UnmarshallUint32(buf[0:4])

	// Field (1) 'EffectiveBalanceEth'
	e.EffectiveBalanceEth = ssz.UnmarshallUint16(buf[4:6])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the EpochStatsPackedValidator object
func (e *EpochStatsPackedValidator) SizeSSZ() (size int) {
	size = 6
	return
}

// HashTreeRoot ssz hashes the EpochStatsPackedValidator object
func (e *EpochStatsPackedValidator) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the EpochStatsPackedValidator object with a hasher
func (e *EpochStatsPackedValidator) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorIndexOffset'
	hh.PutUint32(e.ValidatorIndexOffset)

	// Field (1) 'EffectiveBalanceEth'
	hh.PutUint16(e.EffectiveBalanceEth)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the EpochStatsPackedValidator object
func (e *EpochStatsPackedValidator) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}

// MarshalSSZ ssz marshals the EpochStatsPendingWithdrawals object
func (e *EpochStatsPendingWithdrawals) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(e)
}

// MarshalSSZTo ssz marshals the EpochStatsPendingWithdrawals object to a target array
func (e *EpochStatsPendingWithdrawals) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'ValidatorIndex'
	dst = ssz.MarshalUint64(dst, uint64(e.ValidatorIndex))

	// Field (1) 'Epoch'
	dst = ssz.MarshalUint64(dst, uint64(e.Epoch))

	return
}

// UnmarshalSSZ ssz unmarshals the EpochStatsPendingWithdrawals object
func (e *EpochStatsPendingWithdrawals) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 16 {
		return ssz.ErrSize
	}

	// Field (0) 'ValidatorIndex'
	e.ValidatorIndex = phase0.ValidatorIndex(ssz.UnmarshallUint64(buf[0:8]))

	// Field (1) 'Epoch'
	e.Epoch = phase0.Epoch(ssz.UnmarshallUint64(buf[8:16]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the EpochStatsPendingWithdrawals object
func (e *EpochStatsPendingWithdrawals) SizeSSZ() (size int) {
	size = 16
	return
}

// HashTreeRoot ssz hashes the EpochStatsPendingWithdrawals object
func (e *EpochStatsPendingWithdrawals) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(e)
}

// HashTreeRootWith ssz hashes the EpochStatsPendingWithdrawals object with a hasher
func (e *EpochStatsPendingWithdrawals) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'ValidatorIndex'
	hh.PutUint64(uint64(e.ValidatorIndex))

	// Field (1) 'Epoch'
	hh.PutUint64(uint64(e.Epoch))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the EpochStatsPendingWithdrawals object
func (e *EpochStatsPendingWithdrawals) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(e)
}
