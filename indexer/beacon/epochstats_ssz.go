// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: e6026e52529e1fc5c09014f17f595893e08dbbab6e9f14ae7004dc5c79bd533e
// Version: v1.0.3-0.20250928193621-b517e2f054d2 (https://github.com/pk910/dynamic-ssz)
package beacon

import (
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *EpochStatsPacked) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	dstlen := len(dst)
	// Offset #0 'ActiveValidators'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #1 'ProposerDuties'
	offset1 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #2 'SyncCommitteeDuties'
	offset2 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #3 'RandaoMix'
		t := t.RandaoMix
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #4 'NextRandaoMix'
		t := t.NextRandaoMix
		limit := 32
		dst = append(dst, []byte(t[:limit])...)
	}
	{ // Field #5 'TotalBalance'
		t := t.TotalBalance
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #6 'ActiveBalance'
		t := t.ActiveBalance
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #7 'FirstDepositIndex'
		t := t.FirstDepositIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	// Offset #8 'PendingWithdrawals'
	offset8 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	// Offset #9 'PendingConsolidations'
	offset9 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #10 'ConsolidatingBalance'
		t := t.ConsolidatingBalance
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Dynamic Field #0 'ActiveValidators'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.ActiveValidators
		max := 10000000
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			{ // Field #0 'ValidatorIndexOffset'
				t := t.ValidatorIndexOffset
				dst = sszutils.MarshalUint32(dst, uint32(t))
			}
			{ // Field #1 'EffectiveBalanceEth'
				t := t.EffectiveBalanceEth
				dst = sszutils.MarshalUint32(dst, uint32(t))
			}
		}
	}
	{ // Dynamic Field #1 'ProposerDuties'
		sszutils.UpdateOffset(dst[offset1:offset1+4], len(dst)-dstlen)
		t := t.ProposerDuties
		max := 100
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	{ // Dynamic Field #2 'SyncCommitteeDuties'
		sszutils.UpdateOffset(dst[offset2:offset2+4], len(dst)-dstlen)
		t := t.SyncCommitteeDuties
		max := 10000
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			dst = sszutils.MarshalUint64(dst, uint64(t))
		}
	}
	{ // Dynamic Field #8 'PendingWithdrawals'
		sszutils.UpdateOffset(dst[offset8:offset8+4], len(dst)-dstlen)
		t := t.PendingWithdrawals
		max := 10000000
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			{ // Field #0 'ValidatorIndex'
				t := t.ValidatorIndex
				dst = sszutils.MarshalUint64(dst, uint64(t))
			}
			{ // Field #1 'Amount'
				t := t.Amount
				dst = sszutils.MarshalUint64(dst, uint64(t))
			}
			{ // Field #2 'WithdrawableEpoch'
				t := t.WithdrawableEpoch
				dst = sszutils.MarshalUint64(dst, uint64(t))
			}
		}
	}
	{ // Dynamic Field #9 'PendingConsolidations'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		t := t.PendingConsolidations
		max := 10000000
		hasMax := true
		vlen := len(t)
		if hasMax && vlen > int(max) {
			return dst, sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			t := t[i]
			{ // Field #0 'SourceIndex'
				t := t.SourceIndex
				dst = sszutils.MarshalUint64(dst, uint64(t))
			}
			{ // Field #1 'TargetIndex'
				t := t.TargetIndex
				dst = sszutils.MarshalUint64(dst, uint64(t))
			}
		}
	}
	return dst, nil
}

func (t *EpochStatsPacked) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *EpochStatsPacked) SizeSSZ() (size int) {
	// Field #0 'ActiveValidators' offset (4 bytes)
	// Field #1 'ProposerDuties' offset (4 bytes)
	// Field #2 'SyncCommitteeDuties' offset (4 bytes)
	// Field #3 'RandaoMix' static (32 bytes)
	// Field #4 'NextRandaoMix' static (32 bytes)
	// Field #5 'TotalBalance' static (8 bytes)
	// Field #6 'ActiveBalance' static (8 bytes)
	// Field #7 'FirstDepositIndex' static (8 bytes)
	// Field #8 'PendingWithdrawals' offset (4 bytes)
	// Field #9 'PendingConsolidations' offset (4 bytes)
	// Field #10 'ConsolidatingBalance' static (8 bytes)
	size += 116
	{ // Dynamic field #0 'ActiveValidators'
		vlen := len(t.ActiveValidators)
		size += vlen * 8
	}
	{ // Dynamic field #1 'ProposerDuties'
		vlen := len(t.ProposerDuties)
		size += vlen * 8
	}
	{ // Dynamic field #2 'SyncCommitteeDuties'
		vlen := len(t.SyncCommitteeDuties)
		size += vlen * 8
	}
	{ // Dynamic field #8 'PendingWithdrawals'
		vlen := len(t.PendingWithdrawals)
		size += vlen * 24
	}
	{ // Dynamic field #9 'PendingConsolidations'
		vlen := len(t.PendingConsolidations)
		size += vlen * 16
	}
	return size
}

func (t *EpochStatsPacked) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 116 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'ActiveValidators' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 116 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	// Field #1 'ProposerDuties' (offset)
	offset1 := int(sszutils.UnmarshallUint32(buf[4:8]))
	if offset1 < offset0 || offset1 > buflen {
		return sszutils.ErrOffset
	}
	// Field #2 'SyncCommitteeDuties' (offset)
	offset2 := int(sszutils.UnmarshallUint32(buf[8:12]))
	if offset2 < offset1 || offset2 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #3 'RandaoMix' (static)
		buf := buf[12:44]
		copy(t.RandaoMix[:], buf)
	}
	{ // Field #4 'NextRandaoMix' (static)
		buf := buf[44:76]
		copy(t.NextRandaoMix[:], buf)
	}
	{ // Field #5 'TotalBalance' (static)
		buf := buf[76:84]
		t.TotalBalance = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #6 'ActiveBalance' (static)
		buf := buf[84:92]
		t.ActiveBalance = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #7 'FirstDepositIndex' (static)
		buf := buf[92:100]
		t.FirstDepositIndex = uint64(sszutils.UnmarshallUint64(buf))
	}
	// Field #8 'PendingWithdrawals' (offset)
	offset8 := int(sszutils.UnmarshallUint32(buf[100:104]))
	if offset8 < offset2 || offset8 > buflen {
		return sszutils.ErrOffset
	}
	// Field #9 'PendingConsolidations' (offset)
	offset9 := int(sszutils.UnmarshallUint32(buf[104:108]))
	if offset9 < offset8 || offset9 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #10 'ConsolidatingBalance' (static)
		buf := buf[108:116]
		t.ConsolidatingBalance = phase0.Gwei(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #0 'ActiveValidators' (dynamic)
		buf := buf[offset0:offset1]
		val1 := t.ActiveValidators
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val1) < itemCount {
			val1 = make([]EpochStatsPackedValidator, itemCount)
		} else if len(val1) > itemCount {
			val1 = val1[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val2 := val1[i]
			buf := buf[8*i : 8*(i+1)]
			buflen := len(buf)
			if buflen < 8 {
				return sszutils.ErrUnexpectedEOF
			}
			{ // Field #0 'ValidatorIndexOffset' (static)
				buf := buf[0:4]
				val2.ValidatorIndexOffset = uint32(sszutils.UnmarshallUint32(buf))
			}
			{ // Field #1 'EffectiveBalanceEth' (static)
				buf := buf[4:8]
				val2.EffectiveBalanceEth = uint32(sszutils.UnmarshallUint32(buf))
			}
			val1[i] = val2
		}
		t.ActiveValidators = val1
	}
	{ // Field #1 'ProposerDuties' (dynamic)
		buf := buf[offset1:offset2]
		val3 := t.ProposerDuties
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val3) < itemCount {
			val3 = make([]phase0.ValidatorIndex, itemCount)
		} else if len(val3) > itemCount {
			val3 = val3[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val3[i] = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
		}
		t.ProposerDuties = val3
	}
	{ // Field #2 'SyncCommitteeDuties' (dynamic)
		buf := buf[offset2:offset8]
		val4 := t.SyncCommitteeDuties
		itemCount := len(buf) / 8
		if len(buf)%8 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val4) < itemCount {
			val4 = make([]phase0.ValidatorIndex, itemCount)
		} else if len(val4) > itemCount {
			val4 = val4[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			buf := buf[8*i : 8*(i+1)]
			val4[i] = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
		}
		t.SyncCommitteeDuties = val4
	}
	{ // Field #8 'PendingWithdrawals' (dynamic)
		buf := buf[offset8:offset9]
		val5 := t.PendingWithdrawals
		itemCount := len(buf) / 24
		if len(buf)%24 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val5) < itemCount {
			val5 = make([]electra.PendingPartialWithdrawal, itemCount)
		} else if len(val5) > itemCount {
			val5 = val5[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val6 := val5[i]
			buf := buf[24*i : 24*(i+1)]
			buflen := len(buf)
			if buflen < 24 {
				return sszutils.ErrUnexpectedEOF
			}
			{ // Field #0 'ValidatorIndex' (static)
				buf := buf[0:8]
				val6.ValidatorIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
			}
			{ // Field #1 'Amount' (static)
				buf := buf[8:16]
				val6.Amount = phase0.Gwei(sszutils.UnmarshallUint64(buf))
			}
			{ // Field #2 'WithdrawableEpoch' (static)
				buf := buf[16:24]
				val6.WithdrawableEpoch = phase0.Epoch(sszutils.UnmarshallUint64(buf))
			}
			val5[i] = val6
		}
		t.PendingWithdrawals = val5
	}
	{ // Field #9 'PendingConsolidations' (dynamic)
		buf := buf[offset9:]
		val7 := t.PendingConsolidations
		itemCount := len(buf) / 16
		if len(buf)%16 != 0 {
			return sszutils.ErrUnexpectedEOF
		}
		if len(val7) < itemCount {
			val7 = make([]electra.PendingConsolidation, itemCount)
		} else if len(val7) > itemCount {
			val7 = val7[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			val8 := val7[i]
			buf := buf[16*i : 16*(i+1)]
			buflen := len(buf)
			if buflen < 16 {
				return sszutils.ErrUnexpectedEOF
			}
			{ // Field #0 'SourceIndex' (static)
				buf := buf[0:8]
				val8.SourceIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
			}
			{ // Field #1 'TargetIndex' (static)
				buf := buf[8:16]
				val8.TargetIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
			}
			val7[i] = val8
		}
		t.PendingConsolidations = val7
	}
	return nil
}

func (t *EpochStatsPacked) HashTreeRootWith(hh sszutils.HashWalker) error {
	idx := hh.Index()
	{ // Field #0 'ActiveValidators'
		t := t.ActiveValidators
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			{ // Field #0 'ValidatorIndexOffset'
				t := t.ValidatorIndexOffset
				hh.PutUint32(uint32(t))
			}
			{ // Field #1 'EffectiveBalanceEth'
				t := t.EffectiveBalanceEth
				hh.PutUint32(uint32(t))
			}
			hh.Merkleize(idx)
		}
		limit := sszutils.CalculateLimit(10000000, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #1 'ProposerDuties'
		t := t.ProposerDuties
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint64(uint64(t))
		}
		limit := sszutils.CalculateLimit(100, vlen, 8)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #2 'SyncCommitteeDuties'
		t := t.SyncCommitteeDuties
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			hh.AppendUint64(uint64(t))
		}
		limit := sszutils.CalculateLimit(10000, vlen, 8)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #3 'RandaoMix'
		t := t.RandaoMix
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #4 'NextRandaoMix'
		t := t.NextRandaoMix
		idx := hh.Index()
		hh.PutBytes(t[:])
		hh.Merkleize(idx)
	}
	{ // Field #5 'TotalBalance'
		t := t.TotalBalance
		hh.PutUint64(uint64(t))
	}
	{ // Field #6 'ActiveBalance'
		t := t.ActiveBalance
		hh.PutUint64(uint64(t))
	}
	{ // Field #7 'FirstDepositIndex'
		t := t.FirstDepositIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #8 'PendingWithdrawals'
		t := t.PendingWithdrawals
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			{ // Field #0 'ValidatorIndex'
				t := t.ValidatorIndex
				hh.PutUint64(uint64(t))
			}
			{ // Field #1 'Amount'
				t := t.Amount
				hh.PutUint64(uint64(t))
			}
			{ // Field #2 'WithdrawableEpoch'
				t := t.WithdrawableEpoch
				hh.PutUint64(uint64(t))
			}
			hh.Merkleize(idx)
		}
		limit := sszutils.CalculateLimit(10000000, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #9 'PendingConsolidations'
		t := t.PendingConsolidations
		idx := hh.Index()
		vlen := uint64(len(t))
		for i := 0; i < int(vlen); i++ {
			t := t[i]
			idx := hh.Index()
			{ // Field #0 'SourceIndex'
				t := t.SourceIndex
				hh.PutUint64(uint64(t))
			}
			{ // Field #1 'TargetIndex'
				t := t.TargetIndex
				hh.PutUint64(uint64(t))
			}
			hh.Merkleize(idx)
		}
		limit := sszutils.CalculateLimit(10000000, vlen, 32)
		hh.MerkleizeWithMixin(idx, vlen, limit)
	}
	{ // Field #10 'ConsolidatingBalance'
		t := t.ConsolidatingBalance
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *EpochStatsPacked) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
